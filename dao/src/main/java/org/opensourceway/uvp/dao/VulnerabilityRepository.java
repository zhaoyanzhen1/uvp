package org.opensourceway.uvp.dao;

import org.opensourceway.uvp.entity.Vulnerability;
import org.opensourceway.uvp.enums.VulnSource;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import java.util.List;
import java.util.UUID;

public interface VulnerabilityRepository extends JpaRepository<Vulnerability, UUID> {
    // There are a gin index and a btree index on vuln_id, the subquery will use the btree index,
    // otherwise, the gin index may be used and will slow down the query.
    @Query(value = """
            SELECT *
            FROM vulnerability
            WHERE source = :#{#source?.name()}
                AND vuln_id IN (
                    SELECT vuln_id
                    FROM vulnerability
                    WHERE vuln_id in :vulnIds
                )
            """,
            nativeQuery = true)
    List<Vulnerability> findBySourceAndVulnIds(VulnSource source, List<String> vulnIds);

    @Query(value = """
            SELECT DISTINCT(v.*)
            FROM vulnerability v
            WHERE source IN :sources
            	AND id IN (
            		SELECT id
            		FROM vulnerability
            		WHERE vuln_id in :vulnIds
            		UNION
            		SELECT vuln_id
            		FROM alias a
            		WHERE a.alias in :vulnIds
            	)
            ORDER BY
                v.modified DESC NULLS LAST
            """,
            nativeQuery = true)
    List<Vulnerability> findBySourcesAndVulnIds(List<String> sources, List<String> vulnIds);

    @Query(value = """
            SELECT DISTINCT(vuln_id)
            FROM vulnerability
            WHERE source IN :sources
                AND (inserted IS TRUE OR updated IS TRUE)
            ORDER BY vuln_id
            """, nativeQuery = true)
    List<String> findDistinctUpsertUnpushableVulnIds(List<String> sources);

    @Query(value = """
            SELECT *
            FROM vulnerability
            WHERE source IN :sources
                AND (inserted IS TRUE OR updated IS TRUE)
            """, nativeQuery = true)
    List<Vulnerability> findUpsertUnpushableVulns(List<String> sources);

    @Query(value = """
            SELECT *
            FROM vulnerability
            WHERE source IN :sources
                AND (inserted IS TRUE OR updated IS TRUE)
            ORDER BY modified DESC NULLS LAST
            FOR UPDATE SKIP LOCKED
            LIMIT :limit
            """, nativeQuery = true)
    List<Vulnerability> findRecentUpsertPushableVulnsWithLockWithLimit(List<String> sources, Integer limit);

    @Query(value = """
            SELECT DISTINCT(v.*)
            FROM vulnerability v
            WHERE withdrawn IS NULL
                AND source = :#{#source?.name()}
            	AND id IN (
            		SELECT vuln_id
            		FROM affected_package ap
            		WHERE (:accurate IS FALSE AND ap.purl ILIKE CONCAT('%', :purl, '%'))
                    	OR (:accurate IS TRUE AND ap.purl = :purl)
            	)
            ORDER BY
                v.modified DESC NULLS LAST
            LIMIT :limit OFFSET :offset
            """,
            nativeQuery = true)
    List<Vulnerability> searchBySourceAndPurl(VulnSource source, String purl, Boolean accurate,
                                              Integer limit, Integer offset);

    @Query(value = """
            SELECT DISTINCT(v.*)
            FROM vulnerability v
            WHERE withdrawn IS NULL
                AND source = :#{#source?.name()}
            	AND (COALESCE(TRIM(:keyword), '') = ''
            		OR (
            			COALESCE(TRIM(:keyword), '') <> '' AND id IN (
            			SELECT vuln_id
            			FROM affected_package ap
            			WHERE ap.name ILIKE CONCAT('%', :keyword, '%')
            			UNION
            			SELECT id
            			FROM vulnerability
            			WHERE vuln_id ILIKE CONCAT('%', :keyword, '%')
            			UNION
            			SELECT vuln_id
            			FROM alias a
            			WHERE a.alias ILIKE CONCAT('%', :keyword, '%')
            			)
            		)
            	)
            ORDER BY
                v.modified DESC NULLS LAST
            LIMIT :limit OFFSET :offset
            """,
            nativeQuery = true)
    List<Vulnerability> searchBySourceAndKeyword(VulnSource source, String keyword, Integer limit, Integer offset);

    @Query(value = "SELECT * FROM vulnerability WHERE source = :#{#source?.name()} AND vuln_id = :vulnId",
            nativeQuery = true)
    Vulnerability findBySourceAndVulnId(VulnSource source, String vulnId);
}